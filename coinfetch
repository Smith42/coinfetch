#! /usr/bin/env python3

# Delwink Software (2014-2015)
# coinfetch
#
# This script is free software, released under the terms of the MIT license.
# See LICENSE for more information.
#
# This release of coinfetch is maintained by Delwink Software.
#
# Feature requests: sales@delwink.com
# Links to PGP keys available at http://delwink.com/contact.html
#
# Donate to Delwink!
# BTC  - 1A3d3YQmUkrwDpnPuuV42muvZuRar9acC9
# LTC  - LYzCqLD5nrf1hnRe5uKpeThDDXd3B3TawC
# DOGE - DSiVFYZmMCykf5ALqBNwiah8h1zKqT4sZo

##### ORIGINAL DEVELOPER COMMENTS #####

# Created and maintained by Michael Smith (2014)
# And licensed under the MIT license 
# 
# Feel free to modify
# So generous: DGSWzqyofHC6YDSA34hwVQpWGQHnzJm1sk
#
# Values retrieved are in the form 
#       1 <coin_a> = <printed output> <coin_b>
#
# Remember to make this file executable ( "$chmod +x ./coinfetch" )

##### END ORIGINAL DEVELOPER COMMENTS #####

from requests import get
from sys import argv

def coinfetch(coin_a, coin_b, amt):
    """
    Fetch a coin pair
    """
    url = 'https://btc-e.com/api/3/ticker/'
    pair = '%s_%s' %(coin_a, coin_b)

    r = get(url + pair)
    out = 0.0

    try:
        out = float(r.json()[pair]['avg']) * amt
    except KeyError:
        pair = '%s_%s' %(coin_b, coin_a)
        r = get(url + pair)
        out = (float(r.json()[pair]['avg']) ** -1) * amt

    return out

if __name__ == '__main__':
    try:
        bump = 1 if len(argv) == 4 else 0
        amt = float(argv[1]) if len(argv) == 4 else 1.0

        print('%.8f' %coinfetch(argv[1+bump], argv[2+bump], amt))
    except IndexError:
        print('USAGE: %s [amount] <from> <to>' %argv[0])
        exit(1)
    except KeyError:
        print('coinfetch: currency pair not found')
        exit(2)
    except ValueError:
        print('coinfetch: "%s" is not a valid number' %argv[1])
        exit(3)
